@page "/editproduct/{id:int}"

@attribute [Authorize(Policy = "Inventory")]

@rendermode InteractiveServer

@inject NavigationManager NavigationManager
@inject IViewProductByIdUseCase ViewProductByIdUseCase
@inject IEditProductUseCase EditProductUseCase


<h3>编辑产品</h3>
<br />

@if (this.product is not null)
{
    <EditForm Model="product" OnValidSubmit="Update">
        <DataAnnotationsValidator></DataAnnotationsValidator>
        @* <ValidationSummary></ValidationSummary> *@

        <div class="mb-3">
            <label for="name">产品名称</label>
            <InputText id="name"
                       @bind-Value="product.ProductName"
                       class="form-control">
            </InputText>
            <ValidationMessage For="() => product.ProductName"></ValidationMessage>
        </div>

        <div class="mb-3">
            <label for="quantity">数量</label>
            <InputNumber id="quantity"
                         @bind-Value="product.Quantity"
                         class="form-control">
            </InputNumber>
            <ValidationMessage For="() => product.Quantity"></ValidationMessage>
        </div>

        <div class="mb-3">
            <label for="price">单价</label>
            <InputNumber id="price"
                         @bind-Value="product.Price"
                         class="form-control">
            </InputNumber>
            <ValidationMessage For="() => product.Price"></ValidationMessage>
        </div>

        <div class="mb-3">
            <label for="product">产品</label>
            <ProductInventoriesComponent Product="this.product"></ProductInventoriesComponent>
            <ValidationMessage For="() => product.ProductInventories"></ValidationMessage>
        </div>

        <br />
        <button type="submit" class="btn btn-primary">更新</button>
        &nbsp;
        <a href="/products" class="btn btn-primary">返回</a>

    </EditForm>
}


@code {
    private Product? product;

    [Parameter]
    public int Id { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        product = await ViewProductByIdUseCase.ExecuteAsync(this.Id);
    }

    private async Task Update()
    {
        if (product is not null)
        {
            await EditProductUseCase.ExecuteAsync(this.product);
            NavigationManager.NavigateTo("/products");
        }
    }
}
