@page "/addproduct"

@attribute [Authorize(Policy = "Inventory")]

@rendermode InteractiveServer

@inject IAddProductUseCase AddProductUseCase
@inject NavigationManager NavigationManager

<h3>添加产品</h3>
<br />
<br />

<EditForm Model="product" OnValidSubmit="Save">
    <DataAnnotationsValidator></DataAnnotationsValidator>
    @* <ValidationSummary></ValidationSummary> *@

    <div class="mb-3">
        <label for="name">产品名称</label>
        <InputText id="name"
                   @bind-Value="product.ProductName"
                   class="form-control">
        </InputText>
        <ValidationMessage For="() => product.ProductName"></ValidationMessage>
    </div>

    <div class="mb-3">
        <label for="quantity">数量</label>
        <InputNumber id="quantity"
                     @bind-Value="product.Quantity"
                     class="form-control">
        </InputNumber>
        <ValidationMessage For="() => product.Quantity"></ValidationMessage>
    </div>

    <div class="mb-3">
        <label for="price">单价</label>
        <InputNumber id="price"
                     @bind-Value="product.Price"
                     class="form-control">
        </InputNumber>
        <ValidationMessage For="() => product.Price"></ValidationMessage>
    </div>

    <div class="mb-3">
        <label for="product">产品</label>
        <ProductInventoriesComponent Product="this.product"></ProductInventoriesComponent>
        <ValidationMessage For="() => product.ProductInventories"></ValidationMessage>
    </div>

    <br />
    <button type="submit" class="btn btn-primary">保存</button>
    &nbsp;
    <a href="/products" class="btn btn-primary">返回</a>

</EditForm>

@code {

    private Product product { get; set; } = new Product();

    private async Task Save()
    {
        await AddProductUseCase.ExecuteAsync(product);

        NavigationManager.NavigateTo("/products");
    }
}
