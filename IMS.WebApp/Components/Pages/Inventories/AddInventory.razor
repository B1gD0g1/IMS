@page "/addinventory"

@inject IAddInventoryUseCase AddInventoryUseCase
@inject NavigationManager NavigationManager

<h3>添加库存</h3>
<br />
<br />

<EditForm Model="inventory" FormName="formInventory" OnValidSubmit="Save">
    <DataAnnotationsValidator></DataAnnotationsValidator>
    @* <ValidationSummary></ValidationSummary> *@

    <div class="mb-3">
        <label for="name">库存名称</label>
        <InputText id="name"
        @bind-Value="inventory.InventoryName"
        class="form-control">
        </InputText>
        <ValidationMessage For="() => inventory.InventoryName"></ValidationMessage>
    </div>

    <div class="mb-3">
        <label for="quantity">数量</label>
        <InputNumber id="quantity"
        @bind-Value="inventory.Quantity"
        class="form-control">
        </InputNumber>
        <ValidationMessage For="() => inventory.Quantity"></ValidationMessage>
    </div>

    <div class="mb-3">
        <label for="price">单价</label>
        <InputNumber id="price"
        @bind-Value="inventory.Price"
        class="form-control">
        </InputNumber>
        <ValidationMessage For="() => inventory.Price"></ValidationMessage>
    </div>

    <br />
    <button type="submit" class="btn btn-primary">保存</button>
    &nbsp;
    <a href="/inventories" class="btn btn-primary">返回</a>

</EditForm>


@code {

    [SupplyParameterFromForm]
    private InventoryViewModel inventory { get; set; } = new InventoryViewModel();

    private async Task Save()
    {
        var inv = new Inventory
        {
            InventoryId = inventory.InventoryId,
            InventoryName = inventory.InventoryName,
            Price = inventory.Price,
            Quantity = inventory.Quantity
        };

        await AddInventoryUseCase.ExecuteAsync(inv);

        NavigationManager.NavigateTo("/inventories");
    }
}
