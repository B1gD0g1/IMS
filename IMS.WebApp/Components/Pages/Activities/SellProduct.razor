@using static IMS.WebApp.Components.Controls.Common.AutoCompleteComponent

@page "/sell"

@attribute [Authorize(Policy = "Sales")]

@rendermode InteractiveServer

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IJSRuntime JSRuntime

@inject IViewProductsByNameUseCase ViewProductsByNameUseCase
@inject IViewProductByIdUseCase ViewProductByIdUseCase
@inject ISellProductUseCase SellProductUseCase

<h3>销售产品</h3>
<br />

<EditForm id="sell-form" Model="sellViewModel" OnValidSubmit="Sell">
    <DataAnnotationsValidator></DataAnnotationsValidator>
    <ValidationSummary></ValidationSummary>

    <div class="mb-1">
        <label for="po">销售订单号</label>
        <InputText id="po" @bind-Value="sellViewModel.SalesOrderNumber" class="form-control"></InputText>
    </div>
    <br />

    <div class="card">
        <div class="card-body">
            <div class="mb-1">
                <AutoCompleteComponent Label="销售的产品"
                                       SearchFunction="SearchProduct"
                                       OnItemSelected="HandleItemSelected">
                </AutoCompleteComponent>
            </div>
        </div>
    </div>
    <br />

    <div class="mb-1">
        <label for="qty">数量</label>
        <InputNumber id="qty"
                     @bind-Value="sellViewModel.QuantityToSell"
                     class="form-control"></InputNumber>
    </div>
    <br />

    <div class="mb-1">
        <label for="price">单价</label>
        <InputNumber id="price"
                     @bind-Value="sellViewModel.UnitPrice"
                     class="form-control"></InputNumber>
    </div>
    <br />

    <button type="submit" class="btn btn-primary">销售</button>
</EditForm>



@code {
    private SellViewModel sellViewModel = new SellViewModel();

    private Product? selectedProduct;

    private AuthenticationState? authenState;


    protected override async Task OnInitializedAsync()
    {
        authenState = await this.AuthenticationStateProvider.GetAuthenticationStateAsync();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);

        if (firstRender)
        {
            JSRuntime.InvokeVoidAsync("preventFormSubmission", "sell-form");
        }
    }

    private async Task<List<ItemViewModel>?> SearchProduct(string name)
    {
        // 调用用例服务获取数据
        var list = await ViewProductsByNameUseCase.ExecuteAsync(name);

        if (list is null) return null;

        // 数据转换
        return list
            .Select(x => new ItemViewModel { Id = x.ProductId, Name = x.ProductName })?
            .ToList();
    }

    private async Task HandleItemSelected(ItemViewModel item)
    {
        selectedProduct = await ViewProductByIdUseCase.ExecuteAsync(item.Id);

        this.sellViewModel.ProductId = item.Id;
        this.sellViewModel.Product = selectedProduct;
        this.sellViewModel.UnitPrice = selectedProduct.Price;
    }

    private async Task Sell()
    {
        string userName = string.Empty;

        if (authenState?.User?.Identity?.IsAuthenticated ?? false)
        {
            userName = authenState.User.Identity.Name ?? string.Empty;
        }

        await SellProductUseCase.ExecuteAsync(
            this.sellViewModel.SalesOrderNumber,
            this.sellViewModel.Product,
            this.sellViewModel.QuantityToSell,
            this.sellViewModel.UnitPrice,
            userName
        );

        this.sellViewModel = new SellViewModel();
        this.selectedProduct = null;
    }
}
