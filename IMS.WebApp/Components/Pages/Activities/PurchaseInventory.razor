@page "/purchase"

@using static IMS.WebApp.Components.Controls.Common.AutoCompleteComponent

@rendermode InteractiveServer

@inject IJSRuntime JSRuntime

@inject IViewInventoriesByNameUseCase ViewInventoriesByNameUseCase
@inject IViewInventoryByIdUseCase ViewInventoryByIdUseCase
@inject IPurchaseInventoryUseCase PurchaseInventoryUseCase



<h3>采购库存</h3>
<br />

<EditForm id="purchase-form" Model="purchaseViewModel" OnValidSubmit="Purchase">
    <DataAnnotationsValidator></DataAnnotationsValidator>
    <ValidationSummary></ValidationSummary>

    <div class="mb-1">
        <label for="po">采购订单号</label>
        <InputText id="po" @bind-Value="purchaseViewModel.PONumber" class="form-control"></InputText>
    </div>
    <br />

    <div class="card">
        <div class="card-body">
            <div class="mb-1">
                <AutoCompleteComponent Label="采购的库存"
                                       SearchFunction="SearchInventory"
                                       OnItemSelected="HandleItemSelected">
                </AutoCompleteComponent>
                @if (purchaseViewModel.InventoryPrice > 0)
                {
                    <text>价格：</text>
                    @purchaseViewModel.InventoryPrice.ToString("c")
                    ;
                }
            </div>
        </div>
    </div>
    <br />

    <div class="mb-1">
        <label for="qty">数量</label>
        <InputNumber id="qty"
                     @bind-Value="purchaseViewModel.QuantityToPurchase"
                     class="form-control"></InputNumber>
    </div>
    <br />

    <button type="submit" class="btn btn-primary">购买</button>
</EditForm>




@code {
    private PurchaseViewModel purchaseViewModel = new PurchaseViewModel();

    private Inventory? selectedInventory = null;

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);

        if (firstRender)
        {
            JSRuntime.InvokeVoidAsync("preventFormSubmission", "purchase-form");
        }
    }

    private async Task<List<ItemViewModel>?> SearchInventory(string name)
    {
        // 调用用例服务获取数据
        var list = await ViewInventoriesByNameUseCase.ExecuteAsync(name);

        if (list is null) return null;

        // 数据转换
        return list
            .Select(x => new ItemViewModel { Id = x.InventoryId, Name = x.InventoryName })?
            .ToList();
    }

    private async Task HandleItemSelected(ItemViewModel item)
    {
        selectedInventory = await ViewInventoryByIdUseCase.ExecuteAsync(item.Id);

        this.purchaseViewModel.InventoryId = item.Id;
        this.purchaseViewModel.InventoryPrice = selectedInventory.Price;
    }

    private async Task Purchase()
    {
        await PurchaseInventoryUseCase.ExecuteAsync(
            this.purchaseViewModel.PONumber,
            selectedInventory,
            this.purchaseViewModel.QuantityToPurchase,
            "Ben"
        );

        this.purchaseViewModel = new PurchaseViewModel();
        this.selectedInventory = null;
    }
}
